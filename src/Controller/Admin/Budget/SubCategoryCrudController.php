<?php

declare(strict_types=1);

namespace App\Controller\Admin\Budget;

use App\Entity\Budget\SubCategory;
use App\Repository\Budget\CategoryRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;

class SubCategoryCrudController extends BaseCrudController
{
    protected Request $request;

    public function __construct(
        RequestStack $requestStack,
        private readonly CategoryRepository $categoryRepository,
        private readonly AdminUrlGenerator $adminUrlGenerator,
    ) {
        $this->request = $requestStack->getCurrentRequest();
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud = parent::configureCrud($crud);
        $crud->setEntityLabelInPlural('Sous-Catégories')
            ->setEntityLabelInSingular('Sous-Catégorie')
            ->showEntityActionsInlined(true);

        return $crud;
    }

    public static function getEntityFqcn(): string
    {
        return SubCategory::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        $actions = parent::configureActions($actions);
        $returnToBudget = Action::new('returnToBudget', 'Retour au budget', 'fa-solid fa-arrow-up')->linkToRoute('budget_redirect', ['id' => $this->request->get('budget_id')])->setHtmlAttributes(['title' => 'Retour']);

        $actions->add(Crud::PAGE_NEW, $returnToBudget);
        $actions->add(Crud::PAGE_EDIT, $returnToBudget);

        $actions->setPermission('returnToBudget', 'ROLE_USER');

        return $actions
            ->disable(Action::INDEX)
            ->disable(Action::DETAIL)
        ;
    }

    public function configureFields(string $pageName): iterable
    {
        $name = TextField::new('name')->setLabel('Nom de la sous-catégorie');

        return [$name];
    }

    /**
     * @param SubCategory $entityInstance
     */
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $category = $this->categoryRepository->find($this->request->get('category_id'));
        $entityInstance->setCategory($category);
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function delete(AdminContext $context)
    {
        $id = $this->request->get('category_id');
        parent::delete($context); // TODO: Change the autogenerated stub

        return $this->redirect($this->adminUrlGenerator
            ->setDashboard(DashboardController::class)
            ->setController(BudgetCrudController::class)
            ->setAction(Action::DETAIL)
            ->setEntityId($this->request->get('budget_id'))
            ->generateUrl() . '#category-' . $id);
    }

    protected function getRedirectResponseAfterSave(AdminContext $context, string $action): RedirectResponse
    {
        $id = $context->getEntity()->getInstance()->getId();

        $url = $this->adminUrlGenerator
            ->setAction(Action::DETAIL)
            ->setEntityId($this->request->get('budget_id'))
            ->setController(BudgetCrudController::class)
            ->setDashboard(DashboardController::class)
            ->generateUrl() . '#subcategory-' . $id;

        return $this->redirect($url);
    }
}
