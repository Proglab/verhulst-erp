<?php

namespace App\Controller\Admin\Budget;

use App\Entity\Budget\Category;
use App\Entity\User;
use App\Repository\Budget\BudgetRepository;
use App\Repository\Budget\CategoryRepository;
use App\Repository\Budget\EventRepository;
use App\Repository\Budget\Ref\CategoryRepository as CategoryRepositoryRef;
use App\Service\SecurityChecker;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;

class CategoryCrudController extends BaseCrudController
{
    protected Request $request;

    public function __construct(
        SecurityChecker                        $securityChecker,
        RequestStack                           $requestStack,
        private readonly BudgetRepository       $budgetRepository,
        private readonly AdminUrlGenerator     $adminUrlGenerator
    )
    {
        parent::__construct($securityChecker);
        $this->request = $requestStack->getCurrentRequest();
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud = parent::configureCrud($crud);
        $crud->setEntityLabelInPlural('Catégories')
            ->setEntityLabelInSingular('Catégorie')
            ->showEntityActionsInlined(true);

        return $crud;
    }

    public static function getEntityFqcn(): string
    {
        return Category::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        return $actions
            ->disable(Action::INDEX)
            ->disable(Action::DETAIL)
            ;
    }

    public function configureFields(string $pageName): iterable
    {
        $name = TextField::new('name')->setLabel('Nom de la catégorie');
        return [$name];
    }

    protected function getRedirectResponseAfterSave(AdminContext $context, string $action): RedirectResponse
    {
        $url = $this->adminUrlGenerator
            ->setAction(Action::DETAIL)
            ->setEntityId($this->request->get('budget_id'))
            ->setController(BudgetCrudController::class)
            ->setDashboard(DashboardController::class)
            ->generateUrl();

        return $this->redirect($url);
    }

    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $budget = $this->budgetRepository->find($this->request->get('budget_id'));
        $entityInstance->setBudget($budget);
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function delete(AdminContext $context)
    {
        parent::delete($context); // TODO: Change the autogenerated stub
        return $this->redirect($this->adminUrlGenerator
            ->setDashboard(DashboardController::class)
            ->setController(BudgetCrudController::class)
            ->setAction(Action::DETAIL)
            ->setEntityId($this->request->get('budget_id'))
            ->generateUrl());
    }
}
