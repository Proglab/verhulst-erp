<?php

namespace App\Controller\Admin\Budget;

use App\Controller\Admin\BaseCrudController;
use App\Controller\Admin\Budget\Ref\SubCategoryCrudController;
use App\Entity\Budget\Event;
use App\Entity\User;
use App\Service\SecurityChecker;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\CollectionField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;

class EventCrudController extends BaseCrudController
{
    public function __construct(SecurityChecker $securityChecker, private EntityManagerInterface $entityManager)
    {
        parent::__construct($securityChecker);
    }

    public static function getEntityFqcn(): string
    {
        return Event::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud = parent::configureCrud($crud);
        $crud->setEntityLabelInPlural('Events')
            ->setEntityLabelInSingular('Event')
            ->showEntityActionsInlined(true)
            ->setEntityPermission('ROLE_BUDGET');

        return $crud;
    }

    public function configureActions(Actions $actions): Actions
    {
        $actions = parent::configureActions($actions); // TODO: Change the autogenerated stub
        $actions->setPermission(Action::INDEX, 'ROLE_ADMIN_BUDGET');
        $actions->setPermission(Action::DETAIL, 'ROLE_ADMIN_BUDGET');
        $actions->setPermission(Action::DELETE, 'ROLE_ADMIN_BUDGET');
        $actions->setPermission(Action::NEW, 'ROLE_ADMIN_BUDGET');
        $actions->setPermission(Action::EDIT, 'ROLE_ADMIN_BUDGET');
        $actions->setPermission(Action::SAVE_AND_RETURN, 'ROLE_ADMIN_BUDGET');
        $actions->add(Crud::PAGE_INDEX, Action::DETAIL);
        $actions->update(Crud::PAGE_INDEX, Action::DETAIL, function ($action) {
            return $action->setIcon('fa fa-eye')->setLabel(false)->setHtmlAttributes(['title' => 'Voir']);
        });

        $actions->disable(Action::SAVE_AND_ADD_ANOTHER);
        $actions->disable(Action::SAVE_AND_CONTINUE);
        $actions->disable(Action::BATCH_DELETE);
        return $actions;
    }

    public function configureFields(string $pageName): iterable
    {
        $name = TextField::new('name')->setLabel('Nom de l\'event');
        $userRepository = $this->entityManager->getRepository(User::class);
        $admin = AssociationField::new('admin')->setQueryBuilder(
            function($qb) {
                return $qb->andWhere('entity.roles LIKE :role')
                    ->setParameter('role', '%ROLE_ADMIN_BUDGET%');
            }
        );
        $assistants = AssociationField::new('users')->setQueryBuilder(
            function($qb) {
                return $qb->andWhere('entity.roles LIKE :role')
                    ->setParameter('role', '%ROLE_BUDGET%');
            }
        );
        return [$name, $admin, $assistants];
    }

    /**
     * @param EntityManagerInterface $entityManager
     * @param Event $entityInstance
     * @return void
     */
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $entityInstance->setAdmin($this->getUser());
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }
}
