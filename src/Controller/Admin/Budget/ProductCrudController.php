<?php

declare(strict_types=1);

namespace App\Controller\Admin\Budget;

use App\Entity\Budget\Product;
use App\Repository\Budget\SubCategoryRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\ImageField;
use EasyCorp\Bundle\EasyAdminBundle\Field\MoneyField;
use EasyCorp\Bundle\EasyAdminBundle\Field\NumberField;
use EasyCorp\Bundle\EasyAdminBundle\Field\TextField;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestStack;

class ProductCrudController extends BaseCrudController
{
    protected Request $request;
    protected string $uploadDir;

    public function __construct(
        RequestStack $requestStack,
        private readonly SubCategoryRepository $subCategoryRepository,
        private readonly AdminUrlGenerator $adminUrlGenerator,
    ) {
        $this->request = $requestStack->getCurrentRequest();
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud = parent::configureCrud($crud);
        $crud->setEntityLabelInPlural('Produits')
            ->setEntityLabelInSingular('Produit')
            ->showEntityActionsInlined(true);

        return $crud;
    }

    public static function getEntityFqcn(): string
    {
        return Product::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        $actions = parent::configureActions($actions);
        $returnToBudget = Action::new('returnToBudget', 'Retour au budget', 'fa-solid fa-arrow-up')->linkToRoute('budget_redirect', ['id' => $this->request->get('budget_id')])->setHtmlAttributes(['title' => 'Retour']);

        $actions->add(Crud::PAGE_NEW, $returnToBudget);
        $actions->add(Crud::PAGE_EDIT, $returnToBudget);

        $actions->setPermission('returnToBudget', 'ROLE_USER');

        Action::new('filename', false, 'fas fa-download')->linkToCrudAction('download');
        $actions->setPermission('filename', 'ROLE_BUDGET');

        return $actions
            ->disable(Action::INDEX)
            ->disable(Action::DETAIL)
        ;
    }

    public function configureFields(string $pageName): iterable
    {
        $name = TextField::new('title')->setLabel('Nom du produit')
            ->setRequired(true);
        $description = TextField::new('description')->setLabel('Description du produit')
            ->setRequired(false);
        $quantity = NumberField::new('quantity')->setLabel('QuantitÃ©')
            ->setRequired(true);
        $price = MoneyField::new('price')->setStoredAsCents(false)
            ->setNumDecimals(2)
            ->setRequired(true)
            ->setCurrency('EUR')
            ->setLabel('PU');
        $tva = AssociationField::new('vat', 'Tva')
            ->setRequired(true);

        $supplier = AssociationField::new('supplier', 'Fournisseur');

        /**
         * $supplier = AssociationField::new('supplier', 'Fournisseur')
         * ->setRequired(true)
         * ->setCrudController(SupplierCrudController::class)->autocomplete();.
         **/
        $realPrice = MoneyField::new('real_price')->setStoredAsCents(false)
            ->setNumDecimals(2)
            ->setRequired(false)
            ->setCurrency('EUR')
            ->setLabel('Prix unitaire facture (HTVA)');

        $offerPrice = MoneyField::new('offer_price')->setStoredAsCents(false)
            ->setNumDecimals(2)
            ->setRequired(false)
            ->setCurrency('EUR')
            ->setLabel('Prix unitaire offre (HTVA)');

        $file = ImageField::new('filename')->setUploadDir('public/files/products/')->setLabel('Facture')->setUploadedFileNamePattern('[slug]-[contenthash].[extension]');

        return [$name, $description, $price, $quantity, $tva, $supplier, $offerPrice, $realPrice, $file];
    }

    /**
     * @param Product $entityInstance
     */
    public function persistEntity(EntityManagerInterface $entityManager, $entityInstance): void
    {
        $subCategory = $this->subCategoryRepository->find($this->request->get('subcategory_id'));
        $entityInstance->setSubCategory($subCategory);
        parent::persistEntity($entityManager, $entityInstance); // TODO: Change the autogenerated stub
    }

    public function delete(AdminContext $context): RedirectResponse
    {
        $id = $this->request->get('subcategory_id');
        parent::delete($context); // TODO: Change the autogenerated stub

        return $this->redirect($this->adminUrlGenerator
            ->setDashboard(DashboardController::class)
            ->setController(BudgetCrudController::class)
            ->setAction(Action::DETAIL)
            ->setEntityId($this->request->get('budget_id'))
            ->generateUrl() . '#subcategory-' . $id);
    }

    public function download(AdminContext $context): RedirectResponse
    {
        /** @var Product $entity */
        $entity = $context->getEntity()->getInstance();

        return $this->redirect('/files/products/' . $entity->getFilename());
    }

    protected function getRedirectResponseAfterSave(AdminContext $context, string $action): RedirectResponse
    {
        $id = $this->request->get('subcategory_id');
        $url = $this->adminUrlGenerator
            ->setAction(Action::DETAIL)
            ->setEntityId($this->request->get('budget_id'))
            ->setController(BudgetCrudController::class)
            ->setDashboard(DashboardController::class)
            ->generateUrl() . '#subcategory-' . $id;

        return $this->redirect($url);
    }
}
