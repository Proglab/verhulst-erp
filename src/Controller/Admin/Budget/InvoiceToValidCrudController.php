<?php

namespace App\Controller\Admin\Budget;

use App\Admin\Field\FileField;
use App\Entity\Budget\Invoice;
use Doctrine\ORM\QueryBuilder;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FieldCollection;
use EasyCorp\Bundle\EasyAdminBundle\Collection\FilterCollection;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Controller\AbstractCrudController;
use EasyCorp\Bundle\EasyAdminBundle\Dto\EntityDto;
use EasyCorp\Bundle\EasyAdminBundle\Dto\SearchDto;
use EasyCorp\Bundle\EasyAdminBundle\Field\AssociationField;
use EasyCorp\Bundle\EasyAdminBundle\Field\BooleanField;
use EasyCorp\Bundle\EasyAdminBundle\Field\MoneyField;

class InvoiceToValidCrudController extends AbstractCrudController
{
    public static function getEntityFqcn(): string
    {
        return Invoice::class;
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud->setEntityLabelInPlural('Factures fournisseurs à valider')
            ->setEntityLabelInSingular('Facture fournisseur à valider')
            ->showEntityActionsInlined(true)
            ->setEntityPermission('ROLE_BUDGET')
            ->overrideTemplates([
                'crud/edit' => 'admin/budget/invoices/edit.html.twig',
            ]);

        return parent::configureCrud($crud);
    }

    public function configureFields(string $pageName): iterable
    {
        $return = [
            FileField::new('doc', 'Facture au format PDF')->setRequired(true),
            AssociationField::new('event', 'Evènement')->setQueryBuilder(
                fn (QueryBuilder $queryBuilder) => $queryBuilder
                    ->andWhere('entity.archived = :archived')
                    ->setParameter('archived', false)
            )->setRequired(true)->setColumns(12),
            AssociationField::new('supplier', 'Fournisseur')
                ->setRequired(true)->setColumns(12),
            MoneyField::new('price')
                ->setStoredAsCents(false)
                ->setNumDecimals(2)
                ->setRequired(true)
                ->setCurrency('EUR')->setLabel('Prix HT'),
            BooleanField::new('validated', 'Facture validée ?')->setDisabled(true),
        ];
        return $return;
    }

    public function configureActions(Actions $actions): Actions
    {
        $actions = parent::configureActions($actions); // TODO: Change the autogenerated stub
        $actions->disable(Action::NEW);
        return $actions;
    }

    public function createIndexQueryBuilder(SearchDto $searchDto, EntityDto $entityDto, FieldCollection $fields, FilterCollection $filters): QueryBuilder
    {

        $qb = parent::createIndexQueryBuilder($searchDto, $entityDto, $fields, $filters); // TODO: Change the autogenerated stub
        $qb->andWhere('entity.validated = :validate')
            ->setParameter('validate', false)
            ->andWhere('entity.validated_user = :user')
            ->setParameter('user', $this->getUser());
        return $qb;
    }

}
