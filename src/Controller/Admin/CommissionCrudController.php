<?php

declare(strict_types=1);

namespace App\Controller\Admin;

use App\Entity\Commission;
use App\Entity\Product;
use App\Entity\ProductDivers;
use App\Entity\ProductEvent;
use App\Entity\ProductPackageVip;
use App\Entity\ProductSponsoring;
use App\Entity\Project;
use App\Entity\User;
use App\Repository\CommissionRepository;
use App\Repository\ProductRepository;
use App\Repository\UserRepository;
use Doctrine\ORM\EntityManagerInterface;
use EasyCorp\Bundle\EasyAdminBundle\Config\Action;
use EasyCorp\Bundle\EasyAdminBundle\Config\Actions;
use EasyCorp\Bundle\EasyAdminBundle\Config\Crud;
use EasyCorp\Bundle\EasyAdminBundle\Context\AdminContext;
use EasyCorp\Bundle\EasyAdminBundle\Router\AdminUrlGenerator;
use EasyCorp\Bundle\EasyAdminBundle\Security\Permission;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Validator\Validator\ValidatorInterface;

class CommissionCrudController extends BaseCrudController
{
    public function __construct(private EntityManagerInterface $entityManager, private AdminUrlGenerator $adminUrlGenerator, protected ValidatorInterface $validator)
    {
    }

    public function configureCrud(Crud $crud): Crud
    {
        $crud->setEntityLabelInPlural('Commissions')
            ->setEntityLabelInSingular('Commission')
            ->showEntityActionsInlined(true);

        return parent::configureCrud($crud);
    }

    public static function getEntityFqcn(): string
    {
        return Commission::class;
    }

    public function configureActions(Actions $actions): Actions
    {
        $actions = parent::configureActions($actions); // TODO: Change the autogenerated stub

        $editPercentCom = Action::new('editPercentCom', null)
            ->linkToCrudAction('editPercentCom');

        $editPercentVr = Action::new('editPercentVr', null)
            ->linkToCrudAction('editPercentVr');


        return $actions
            ->setPermission('editPercentCom', 'ROLE_ADMIN')
            ->setPermission('editPercentVr', 'ROLE_ADMIN')
            ->remove(Crud::PAGE_INDEX, Action::NEW)
            ->remove(Crud::PAGE_INDEX, Action::EDIT)
            ->remove(Crud::PAGE_INDEX, Action::DELETE)
            ->remove(Crud::PAGE_DETAIL, Action::EDIT)
            ->remove(Crud::PAGE_DETAIL, Action::DELETE)
            ->remove(Crud::PAGE_DETAIL, Action::INDEX)
            ->remove(Crud::PAGE_EDIT, Action::SAVE_AND_RETURN)
            ->remove(Crud::PAGE_NEW, Action::SAVE_AND_RETURN);
    }


    public function editPercentCom(AdminContext $adminContext): Response
    {
        $product_id = $adminContext->getRequest()->get('product_id');
        $user_id = $adminContext->getRequest()->get('user_id');

        $url = $this->adminUrlGenerator
            ->setAction('editPercentCom')
            ->set('product_id', $product_id)
            ->set('user_id', $user_id)
        ;

        $param = $adminContext->getRequest()->get('com');
        $user = $this->entityManager->getRepository(User::class)->find($user_id);
        $product = $this->entityManager->getRepository(Product::class)->find($product_id);

        /** @var CommissionRepository $comRepo */
        $comRepo = $this->entityManager->getRepository(Commission::class);
        /** @var ?Commission $com */
        $com = $comRepo->findOneBy(['product' => $product, 'user' => $user]);

        if (empty($com)) {
            $com = new Commission();
            $com->setUser($user);
            $com->setProduct($product);
        }

        $com->setPercentCom($param);
        $errors = $this->validator->validate($product);
        if (0 === \count($errors)) {
            $comRepo->save($com, true);

            return $this->render('admin/commission/_input_percent.html.twig', [
                'url' => $url,
                'type' => 0.0 === $com->getPercentCom() ? 'error' : '',
                'value' => $com->getPercentCom(),
            ]);
        }

        return $this->render('admin/commission/_input_percent.html.twig', [
            'url' => $url,
            'type' => 'error',
            'value' => $param,
            'errors' => $errors,
        ]);
    }

    public function editPercentVr(AdminContext $adminContext): Response
    {
        $product_id = $adminContext->getRequest()->get('product_id');
        $url = $this->adminUrlGenerator
            ->setAction('editPercentVr')
            ->set('product_id', $product_id)
        ;

        $com = $adminContext->getRequest()->get('com');
        /** @var ProductRepository $productRepo */
        $productRepo = $this->entityManager->getRepository(Product::class);
        /** @var Product $product */
        $product = $productRepo->find($product_id);
        $product->setPercentVr($com);
        $errors = $this->validator->validate($product);

        if (0 === \count($errors)) {
            $productRepo->save($product, true);

            return $this->render('admin/commission/_input_percent.html.twig', [
                'url' => $url,
                'type' => (0.0 === $product->getPercentVr() ? 'error' : ''),
                'value' => $product->getPercentVr(),
            ]);
        }

        return $this->render('admin/commission/_input_percent.html.twig', [
            'url' => $url,
            'type' => 'error',
            'value' => $com,
            'errors' => $errors,
        ]);
    }

    public function index(AdminContext $adminContext): Response
    {
        /** @var UserRepository $usersRepo */
        $usersRepo = $this->entityManager->getRepository(User::class);
        $users = $usersRepo->getCommercials();
        $projects = $this->entityManager->getRepository(Project::class)->findAll();
        $comsData = $this->entityManager->getRepository(Commission::class)->findAll();

        $productsEvent = [];
        $productsPackage = [];
        $productsDivers = [];
        $productsSponsor = [];

        $commissions = [];

        /** @var Project $project */
        foreach ($projects as $project) {
            foreach ($project->getProductEvent() as $productEvent) {
                $productsEvent[] = $productEvent;
            }
            foreach ($project->getProductPackage() as $productPackage) {
                $productsPackage[] = $productPackage;
            }
            foreach ($project->getProductDivers() as $productDivers) {
                $productsDivers[] = $productDivers;
            }
            foreach ($project->getProductSponsoring() as $productSponsor) {
                $productsSponsor[] = $productSponsor;
            }
        }

        /** @var Commission $com */
        foreach ($comsData as $com) {
            /** @var ProductEvent|ProductPackageVip|ProductDivers|ProductSponsoring $product */
            $product = $com->getProduct();
            $commissions[$product->getProject()->getId()][$product->getId()][$com->getUser()->getId()] = $com->getPercentCom();
        }

        return $this->render('admin/commission/index.html.twig', [
            'locale' => $adminContext->getRequest()->getLocale(),
            'users' => $users,
            'commissions' => $commissions,
            'productsEvent' => $productsEvent,
            'productsPackage' => $productsPackage,
            'productsDivers' => $productsDivers,
            'productsSponsor' => $productsSponsor,
        ]);
    }
}
